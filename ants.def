Bootstrap: localimage
From: itk.sif

%environment
    export SAMBA_APPS_DIR="${SAMBA_APPS_DIR:-/opt/samba}"
    export ANTSPATH="${ANTSPATH:-${SAMBA_APPS_DIR}/ants/bin}"
    export PATH="${ANTSPATH}:$PATH"
    export ITK_DIR="${ITK_DIR:-/opt/itk/lib/cmake/ITK-5.3}"
    export SRC_ROOT="${SRC_ROOT:-/opt/src}"
    # ðŸ”’ hard default to the commit we agreed: 0ea8e53
    export ANTS_REF="${ANTS_REF:-0ea8e53}"
    export ANTS_TARGETS="${ANTS_TARGETS:-antsRegistration antsApplyTransforms N4BiasFieldCorrection Atropos ImageMath ResampleImageBySpacing ResampleImage SmoothImage MultiplyImages ThresholdImage}"

%post
    set -eu

    # -- Paths/inputs --
    ITK_DIR=/opt/itk/lib/cmake/ITK-5.3
    INSTALL_PREFIX=/opt/samba/ants
    SRC=/opt/src/ANTs
    BUILD=${SRC}/build
    LOG=/tmp/ants_cmake.log

    mkdir -p /opt/src
    if [ ! -d "$SRC" ]; then
      git clone https://github.com/ANTsX/ANTs.git "$SRC"
    fi
    cd "$SRC"
    git fetch --all -q || true
    git checkout 0ea8e53

    # Fresh build directory
    rm -rf "$BUILD"
    mkdir -p "$BUILD"
    cd "$BUILD"

    # ---- Configure (Option A: SuperBuild OFF) ----
    : > "$LOG"
    if ! cmake -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" \
        -DBUILD_TESTING=OFF \
        -DBUILD_EXAMPLES=ON \
        -DSuperBuild=OFF \
        -DITK_DIR="$ITK_DIR" \
        .. >>"$LOG" 2>&1 ; then
      echo "FATAL: CMake configure failed. Last 200 lines:" >&2
      tail -n 200 "$LOG" >&2
      # Print CMake diagnostic logs if present
      [ -f CMakeFiles/CMakeError.log ]  && { echo "--- CMakeError.log ---";  tail -n 200 CMakeFiles/CMakeError.log; }
      [ -f CMakeFiles/CMakeOutput.log ] && { echo "--- CMakeOutput.log ---"; tail -n 200 CMakeFiles/CMakeOutput.log; }
      exit 1
    fi

    # Ensure generator actually created build.ninja
    if [ ! -f build.ninja ]; then
      echo "FATAL: build.ninja was not generated (generator or configure issue)." >&2
      exit 1
    fi

    # ---- Build selected tools ----

	# ---- Build only the CLI executables we care about (CMake-resolved targets) ----
	JOBS="$(nproc)"; [ "$JOBS" -gt 8 ] && JOBS=8
	BUILD_LOG=/tmp/ants_build.log; : > "$BUILD_LOG"
	
	# Logical list of ANTs tools we actually want
	WANTED="
	  antsRegistration
	  antsApplyTransforms
	  N4BiasFieldCorrection
	  Atropos
	  ImageMath
	  ResampleImageBySpacing
	  ResampleImage
	  SmoothImage
	  MultiplyImages
	  ThresholdImage
	  PrintHeader
	  ConvertImage
	  ConvertImagePixelType
	  SetOrigin
	  SetSpacing
	  ConvertTransformFile
	"
	
	# Gather available targets from BOTH CMake and Ninja, normalize names
	AVAIL=$(
	  {
		cmake --build . --target help 2>/dev/null || true
		ninja -t targets all 2>/dev/null || true
	  } \
	  | sed 's/^[[:space:]]\{0,3\}\.\{3\}[[:space:]]*//' \
	  | sed 's/:.*$//' \
	  | awk '{print $1}' \
	  | sort -u
	)
	
	# Map wanted tool names to actual build targets (accept exact or l_<name>)
	RESOLVED_TARGET_ARGS=""
	for t in $WANTED; do
	  if printf '%s\n' "$AVAIL" | grep -qx "$t"; then
		RESOLVED_TARGET_ARGS="$RESOLVED_TARGET_ARGS --target $t"
	  elif printf '%s\n' "$AVAIL" | grep -qx "l_$t"; then
		RESOLVED_TARGET_ARGS="$RESOLVED_TARGET_ARGS --target l_$t"
	  fi
	done
	
	if [ -n "$RESOLVED_TARGET_ARGS" ]; then
	  echo "CMake targets resolved:$RESOLVED_TARGET_ARGS"
	  # Build just those targets (CMake drives Ninja; pass -j via '--')
	  if ! cmake --build . $RESOLVED_TARGET_ARGS -- -j "$JOBS" >"$BUILD_LOG" 2>&1; then
		echo "ANTs build failed. Last 200 lines:" >&2
		tail -n 200 "$BUILD_LOG" >&2
		exit 1
	  fi
	else
	  echo "Note: none of the requested tools found as targets; building full tree once..." >&2
	  if ! cmake --build . -- -j "$JOBS" >"$BUILD_LOG" 2>&1; then
		echo "ANTs full build failed. Last 200 lines:" >&2
		tail -n 200 "$BUILD_LOG" >&2
		exit 1
	  fi
	fi
	
	# ---- Install (or copy if no install rules) ----
	INSTALL_PREFIX="${SAMBA_APPS_DIR}/ants"
	if ! cmake --install . --prefix "${INSTALL_PREFIX}" ; then
	  echo "Note: No install target; copying built binaries to ${INSTALL_PREFIX}/bin"
	  mkdir -p "${INSTALL_PREFIX}/bin"
	  # Try both direct path and CMake/Ninja query for each tool
	  for t in $WANTED; do
		# 1) common output location
		if [ -f "Examples/$t" ]; then
		  cp -fv "Examples/$t" "${INSTALL_PREFIX}/bin/"; continue
		fi
		# 2) if we resolved a target, ask ninja for its output
		#    (check l_<name> first, then <name>)
		out="$(ninja -t query "l_$t" 2>/dev/null | awk '/^  outputs:/{print $2; exit}')"
		[ -z "$out" ] && out="$(ninja -t query "$t" 2>/dev/null | awk '/^  outputs:/{print $2; exit}')"
		[ -n "$out" ] && [ -f "$out" ] && cp -fv "$out" "${INSTALL_PREFIX}/bin/" || true
	  done
	fi
	
	# ---- Final sanity check ----
	if [ ! -x "${INSTALL_PREFIX}/bin/antsRegistration" ]; then
	  echo "FATAL: ANTs installation failed â€” ${INSTALL_PREFIX}/bin/antsRegistration not found." >&2
	  echo "Built targets were: $RESOLVED_TARGET_ARGS" >&2
	  # show a few outputs for debugging
	  find "${INSTALL_PREFIX}/bin" -maxdepth 1 -type f -printf '%f\n' | sort | head -n 50 >&2 || true
	  exit 1
	fi
	chmod -R a+rX "${INSTALL_PREFIX}"

%test
    set -eu
    [ -x "${SAMBA_APPS_DIR:-/opt/samba}/ants/bin/antsRegistration" ]
    echo "ANTs core tools present."

%runscript
    exec /bin/sh -c "$@"
