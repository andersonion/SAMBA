Bootstrap: localimage
From: itk.sif

%environment
    export SAMBA_APPS_DIR="${SAMBA_APPS_DIR:-/opt/samba}"
    export ANTSPATH="${ANTSPATH:-${SAMBA_APPS_DIR}/ants/bin}"
    export PATH="${ANTSPATH}:$PATH"
    export ITK_DIR="${ITK_DIR:-/opt/itk/lib/cmake/ITK-5.3}"
    export SRC_ROOT="${SRC_ROOT:-/opt/src}"
    # ðŸ”’ hard default to the commit we agreed: 0ea8e53
    export ANTS_REF="${ANTS_REF:-0ea8e53}"
    export ANTS_TARGETS="${ANTS_TARGETS:-antsRegistration antsApplyTransforms N4BiasFieldCorrection Atropos ImageMath ResampleImageBySpacing ResampleImage SmoothImage MultiplyImages ThresholdImage}"

%post
    set -eu

    # -- Paths/inputs --
    ITK_DIR=/opt/itk/lib/cmake/ITK-5.3
    INSTALL_PREFIX=/opt/samba/ants
    SRC=/opt/src/ANTs
    BUILD=${SRC}/build
    LOG=/tmp/ants_cmake.log

    mkdir -p /opt/src
    if [ ! -d "$SRC" ]; then
      git clone https://github.com/ANTsX/ANTs.git "$SRC"
    fi
    cd "$SRC"
    git fetch --all -q || true
    git checkout 0ea8e53

    # Fresh build directory
    rm -rf "$BUILD"
    mkdir -p "$BUILD"
    cd "$BUILD"

    # ---- Configure (Option A: SuperBuild OFF) ----
    : > "$LOG"
    if ! cmake -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" \
        -DBUILD_TESTING=OFF \
        -DBUILD_EXAMPLES=ON \
        -DSuperBuild=OFF \
        -DITK_DIR="$ITK_DIR" \
        .. >>"$LOG" 2>&1 ; then
      echo "FATAL: CMake configure failed. Last 200 lines:" >&2
      tail -n 200 "$LOG" >&2
      # Print CMake diagnostic logs if present
      [ -f CMakeFiles/CMakeError.log ]  && { echo "--- CMakeError.log ---";  tail -n 200 CMakeFiles/CMakeError.log; }
      [ -f CMakeFiles/CMakeOutput.log ] && { echo "--- CMakeOutput.log ---"; tail -n 200 CMakeFiles/CMakeOutput.log; }
      exit 1
    fi

    # Ensure generator actually created build.ninja
    if [ ! -f build.ninja ]; then
      echo "FATAL: build.ninja was not generated (generator or configure issue)." >&2
      exit 1
    fi

    # ---- Build selected tools ----
	# ---------- CLEAN OUT ANY SUPERBUILD ARTIFACTS ----------
	rm -rf build ANTS-build ANTS-prefix 2>/dev/null || true
	mkdir -p build
	cd build

	INSTALL_PREFIX="${SAMBA_APPS_DIR}/ants"
	JOBS=1

	# ---------- CONFIGURE WITH SUPERBUILD OFF ----------
	cmake -G Ninja \
		-DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
		-DITK_DIR:PATH="${ITK_DIR}" \
		-DANTS_SUPERBUILD=OFF \
		-DBUILD_TESTING=OFF \
		-DBUILD_ALL_ANTS_APPS=OFF \
		..

	# Sanity: if SuperBuild dirs still appear, fail fast
	if [ -d "ANTS-build" ] || [ -d "ANTS-prefix" ]; then
		echo "FATAL: ANTs SuperBuild detected (ANTS-build/ANTS-prefix present) even though -DANTS_SUPERBUILD=OFF." >&2
		echo "Make sure the build dir was empty before configure." >&2
		exit 1
	fi

	# ---------- RESOLVE THE REAL TARGET NAMES THEN BUILD ----------
	WANTED="
		antsRegistration
		antsApplyTransforms
		N4BiasFieldCorrection
		Atropos
		ImageMath
		ResampleImageBySpacing
		ResampleImage
		SmoothImage
		MultiplyImages
		ThresholdImage
		PrintHeader
		ConvertImage
		ConvertImagePixelType
		SetOrigin
		SetSpacing
		ConvertTransformFile
	"

	AVAIL=$(
		{ cmake --build . --target help 2>/dev/null || true; ninja -t targets all 2>/dev/null || true; } \
		| sed 's/^[[:space:]]\{0,3\}\.\{3\}[[:space:]]*//' | sed 's/:.*$//' | awk '{print $1}' | sort -u
	)

	RESOLVED=""
	for t in $WANTED; do
		if printf '%s\n' "$AVAIL" | grep -qx "$t"; then
			RESOLVED="$RESOLVED $t"
		elif printf '%s\n' "$AVAIL" | grep -qx "l_$t"; then
			RESOLVED="$RESOLVED l_$t"
		fi
	done

	[ -z "$RESOLVED" ] && {
		echo "FATAL: none of the requested ANTs tool targets found." >&2
		printf '%s\n' "$AVAIL" | head -n 80 >&2
		exit 1
	}

	mkdir -p /tmp/ants_logs
	for tgt in $RESOLVED; do
		log="/tmp/ants_logs/${tgt}.log"; : > "$log"
		echo "=== Building target: $tgt (j=$JOBS) ==="
		if ! cmake --build . --target "$tgt" -- -j "$JOBS" >"$log" 2>&1; then
			echo "BUILD FAILED for $tgt. Last 120 lines:" >&2
			tail -n 120 "$log" >&2
			exit 1
		fi
	done

	# ---------- INSTALL (OR MANUAL COPY IF NO INSTALL RULES) ----------
	if ! cmake --install . --prefix "${INSTALL_PREFIX}" ; then
		echo "No install target; copying built binaries to ${INSTALL_PREFIX}/bin"
		mkdir -p "${INSTALL_PREFIX}/bin"
		for t in $WANTED; do
			[ -f "Examples/$t" ] && cp -fv "Examples/$t" "${INSTALL_PREFIX}/bin/" && continue
			for q in "$t" "l_$t"; do
				out="$(ninja -t query "$q" 2>/dev/null | awk '/^  outputs:/{print $2; exit}')"
				if [ -n "$out" ] && [ -f "$out" ]; then
					cp -fv "$out" "${INSTALL_PREFIX}/bin/"
					break
				fi
			done
		done
	fi

	# ---------- FINAL SANITY CHECK ----------
	if [ ! -x "${INSTALL_PREFIX}/bin/antsRegistration" ]; then
		echo "FATAL: ANTs installation failed â€” ${INSTALL_PREFIX}/bin/antsRegistration not found." >&2
		find "${INSTALL_PREFIX}/bin" -maxdepth 1 -type f -printf '%f\n' | sort | head -n 200 >&2 || true
		exit 1
	fi

	chmod -R a+rX "${INSTALL_PREFIX}"

%test
    set -eu
    [ -x "${SAMBA_APPS_DIR:-/opt/samba}/ants/bin/antsRegistration" ]
    echo "ANTs core tools present."

%runscript
    exec /bin/sh -c "$@"
