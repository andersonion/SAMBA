Bootstrap: localimage
From: itk.sif

%environment
    export SAMBA_APPS_DIR="${SAMBA_APPS_DIR:-/opt/samba}"
    export ANTSPATH="${ANTSPATH:-${SAMBA_APPS_DIR}/ants/bin}"
    export PATH="${ANTSPATH}:$PATH"
    export ITK_DIR="${ITK_DIR:-/opt/itk/lib/cmake/ITK-5.3}"
    export SRC_ROOT="${SRC_ROOT:-/opt/src}"
    # ðŸ”’ hard default to the commit we agreed: 0ea8e53
    export ANTS_REF="${ANTS_REF:-0ea8e53}"
    export ANTS_TARGETS="${ANTS_TARGETS:-antsRegistration antsApplyTransforms N4BiasFieldCorrection Atropos ImageMath ResampleImageBySpacing ResampleImage SmoothImage MultiplyImages ThresholdImage}"

%post
    set -eu

    # -- Paths/inputs --
    ITK_DIR=/opt/itk/lib/cmake/ITK-5.3
    INSTALL_PREFIX=/opt/samba/ants
    SRC=/opt/src/ANTs
    BUILD=${SRC}/build
    LOG=/tmp/ants_cmake.log

    mkdir -p /opt/src
    if [ ! -d "$SRC" ]; then
      git clone https://github.com/ANTsX/ANTs.git "$SRC"
    fi
    cd "$SRC"
    git fetch --all -q || true
    git checkout 0ea8e53

    # Fresh build directory
    rm -rf "$BUILD"
    mkdir -p "$BUILD"
    cd "$BUILD"

    # ---- Configure (Option A: SuperBuild OFF) ----
    : > "$LOG"
    if ! cmake -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" \
        -DBUILD_TESTING=OFF \
        -DBUILD_EXAMPLES=ON \
        -DSuperBuild=OFF \
        -DITK_DIR="$ITK_DIR" \
        .. >>"$LOG" 2>&1 ; then
      echo "FATAL: CMake configure failed. Last 200 lines:" >&2
      tail -n 200 "$LOG" >&2
      # Print CMake diagnostic logs if present
      [ -f CMakeFiles/CMakeError.log ]  && { echo "--- CMakeError.log ---";  tail -n 200 CMakeFiles/CMakeError.log; }
      [ -f CMakeFiles/CMakeOutput.log ] && { echo "--- CMakeOutput.log ---"; tail -n 200 CMakeFiles/CMakeOutput.log; }
      exit 1
    fi

    # Ensure generator actually created build.ninja
    if [ ! -f build.ninja ]; then
      echo "FATAL: build.ninja was not generated (generator or configure issue)." >&2
      exit 1
    fi

    # ---- Build selected tools ----
	# ---- fresh build dir ----
	rm -rf build
	mkdir -p build
	cd build
	
	INSTALL_PREFIX="${SAMBA_APPS_DIR}/ants"
	JOBS=1   # keep very low to avoid OOM; raise to 2â€“4 later if stable
	
	# ---- configure: FORCE SUPERBUILD OFF + use your external ITK ----
	cmake -G Ninja \
	  -DCMAKE_BUILD_TYPE=Release \
	  -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
	  -DITK_DIR:PATH="${ITK_DIR}" \
	  -DANTS_SUPERBUILD=OFF \
	  -DBUILD_TESTING=OFF \
	  -DBUILD_ALL_ANTS_APPS=OFF \
	  ..
	
	# ---- build ONLY the CLIs we care about (targets in this ANTs commit are "l_<name>") ----
	# We resolve l_<name> targets if present; if not, try the plain name.
	WANTED="
	  antsRegistration
	  antsApplyTransforms
	  N4BiasFieldCorrection
	  Atropos
	  ImageMath
	  ResampleImageBySpacing
	  ResampleImage
	  SmoothImage
	  MultiplyImages
	  ThresholdImage
	  PrintHeader
	  ConvertImage
	  ConvertImagePixelType
	  SetOrigin
	  SetSpacing
	  ConvertTransformFile
	"
	
	# discover available targets
	AVAIL=$(
	  { cmake --build . --target help 2>/dev/null || true; ninja -t targets all 2>/dev/null || true; } \
	  | sed 's/^[[:space:]]\{0,3\}\.\{3\}[[:space:]]*//' | sed 's/:.*$//' | awk '{print $1}' | sort -u
	)
	
	RESOLVED=""
	for t in $WANTED; do
	  if printf '%s\n' "$AVAIL" | grep -qx "l_$t"; then
		RESOLVED="$RESOLVED l_$t"
	  elif printf '%s\n' "$AVAIL" | grep -qx "$t"; then
		RESOLVED="$RESOLVED $t"
	  fi
	done
	
	# build sequentially to keep RAM low and get clear errors
	mkdir -p /tmp/ants_logs
	for tgt in $RESOLVED; do
	  echo "=== Building target: $tgt (j=$JOBS) ==="
	  log="/tmp/ants_logs/${tgt}.log"; : > "$log"
	  if ! cmake --build . --target "$tgt" -- -j "$JOBS" >"$log" 2>&1; then
		echo "BUILD FAILED for $tgt. Last 120 lines:" >&2
		tail -n 120 "$log" >&2
		exit 1
	  fi
	done
	
	# ---- install (or copy if a tool lacks install rules) ----
	if ! cmake --install . --prefix "${INSTALL_PREFIX}" ; then
	  echo "No install target; copying built binaries to ${INSTALL_PREFIX}/bin"
	  mkdir -p "${INSTALL_PREFIX}/bin"
	  for t in $WANTED; do
		# common location for built executables in this tree
		[ -f "Examples/$t" ] && cp -fv "Examples/$t" "${INSTALL_PREFIX}/bin/" && continue
		# ask ninja for each variant's output
		for q in "l_$t" "$t"; do
		  out="$(ninja -t query "$q" 2>/dev/null | awk '/^  outputs:/{print $2; exit}')"
		  [ -n "$out" ] && [ -f "$out" ] && cp -fv "$out" "${INSTALL_PREFIX}/bin/" && break || true
		done
	  done
	fi
	
	# ---- sanity ----
	if [ ! -x "${INSTALL_PREFIX}/bin/antsRegistration" ]; then
	  echo "FATAL: ANTs installation failed â€” ${INSTALL_PREFIX}/bin/antsRegistration not found." >&2
	  find "${INSTALL_PREFIX}/bin" -maxdepth 1 -type f -printf '%f\n' | sort | head -n 100 >&2 || true
	  exit 1
	fi
	
	chmod -R a+rX "${INSTALL_PREFIX}"

%test
    set -eu
    [ -x "${SAMBA_APPS_DIR:-/opt/samba}/ants/bin/antsRegistration" ]
    echo "ANTs core tools present."

%runscript
    exec /bin/sh -c "$@"
