Bootstrap: localimage
From: ants.sif

%labels
    Stage "FSL on top of ants.sif"

%environment
    export SAMBA_APPS_DIR="${SAMBA_APPS_DIR:-/opt/samba}"
    # Keep ANTSPATH consistent
    export ANTSPATH="${ANTSPATH:-${SAMBA_APPS_DIR}/ants/bin}"
    export PATH="${ANTSPATH}:$PATH"

    # FSL defaults to living under SAMBA_APPS_DIR via symlink we create in %post
    export FSLDIR="${FSLDIR:-${SAMBA_APPS_DIR}/fsl}"
    export FSLOUTPUTTYPE="${FSLOUTPUTTYPE:-NIFTI_GZ}"
    export PATH="${FSLDIR}/bin:$PATH"

%post
	set -eu
	export DEBIAN_FRONTEND=noninteractive
	SAMBA_APPS_DIR="${SAMBA_APPS_DIR:-/opt/samba}"
	# set -u safe initializers (do this BEFORE any use of these vars)
	: "${FSLBASE:=${SAMBA_APPS_DIR}/fsl}"
	: "${FSLVER:=6.0.6}"
	FSL_VERSION_DIR="${FSLBASE}/${FSLVER}"

	export DEBIAN_FRONTEND=noninteractive


	export PERLBREW_ROOT="${PERLBREW_ROOT:-${SAMBA_APPS_DIR}/perl5}"
	export PERLBREW_HOME="${PERLBREW_HOME:-${PERLBREW_ROOT}}"

	# ---- Remove NeuroDebian (ignore completely) ----
	rm -f /etc/apt/sources.list.d/neurodebian.sources.list /etc/apt/sources.list.d/neurodebian.list || true
	apt-get update

	# ---- Core packages (no NeuroDebian deps) ----
	apt-get install -y --no-install-recommends \
		tzdata ca-certificates gnupg curl wget unzip bzip2 \
		build-essential git cmake ninja-build \
		libfftw3-dev liblapacke-dev zlib1g-dev \
		libjpeg-dev libpng-dev libtiff5-dev \
		libexpat1-dev libxml2-dev libbz2-dev \
		libeigen3-dev bc perl libperl-dev python3 ccache

	# timezone noninteractive sanity
	ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime
	dpkg-reconfigure -f noninteractive tzdata

	# app roots
	mkdir -p "${SAMBA_APPS_DIR}" "${PERLBREW_ROOT}"


    # Provide wrapper env for non-login shells at runtime
    echo "export FSLDIR=${SAMBA_APPS_DIR}/fsl" > /etc/profile.d/99-fsl-samba.sh
    echo 'export FSLOUTPUTTYPE=${FSLOUTPUTTYPE:-NIFTI_GZ}' >> /etc/profile.d/99-fsl-samba.sh
    echo 'export PATH="${FSLDIR}/bin:$PATH"' >> /etc/profile.d/99-fsl-samba.sh
    
	# If the destination exists, remove it to avoid interactive overwrite prompt
	if [ -d "${FSL_VERSION_DIR}" ] && [ -n "$(ls -A "${FSL_VERSION_DIR}" 2>/dev/null || true)" ]; then
		echo "Found existing ${FSL_VERSION_DIR}; removing to avoid installer prompt..."
		rm -rf "${FSL_VERSION_DIR}"
	fi
	# Do NOT mkdir the version dir; let the installer create it
	mkdir -p "${FSLBASE}"

	# Minimal runtime deps for CLI tools (safe on focal)
	apt-get update && apt-get install -y --no-install-recommends \
		libgomp1 libx11-6 libxext6 libxt6 libxmu6 libgl1 libglu1-mesa
	
	set -x
	# Fetch and run the FSL installer (set -u safe; no mktemp)
	tmp_inst="/tmp/fslinstaller.py"
	rm -f "${tmp_inst}"
	curl -fsSL -o "${tmp_inst}" https://fsl.fmrib.ox.ac.uk/fsldownloads/fslinstaller.py || {
		echo "FATAL: failed to download fslinstaller.py" >&2
		exit 1
	}
	set +x

	python3 "${tmp_inst}" -V "${FSLVER}" -d "${FSL_VERSION_DIR}" -q || {
		echo "Retrying FSL installer once..." >&2
		python3 "${tmp_inst}" -V "${FSLVER}" -d "${FSL_VERSION_DIR}" -q
	}

	rm -f "${tmp_inst}"


	# Normalize layout: some installers nest 'fsl' one level deeper; flatten if needed
	if [ -d "${FSL_VERSION_DIR}/fsl" ] && [ -x "${FSL_VERSION_DIR}/fsl/bin/fslmaths" ]; then
		rsync -a "${FSL_VERSION_DIR}/fsl/" "${FSL_VERSION_DIR}/"
		rm -rf "${FSL_VERSION_DIR}/fsl"
	fi


	# --- Build a minimal FSL runtime with only the tools we use ---
	FSL_FULL="${FSL_VERSION_DIR}"                  # where the installer put the full tree
	FSL_MINI="${FSLBASE}/mini"                     # new slim runtime dir
	FSL_TOOLS="fslmaths fdr randomise design_ttest2"         # adjust to your actual needs

	# fresh mini tree
	rm -rf "${FSL_MINI}"
	mkdir -p "${FSL_MINI}/bin" "${FSL_MINI}/lib" "${FSL_MINI}/etc/fslconf" "${FSL_MINI}/share/fsl/data"

	# config is tiny but required by wrappers/env
	cp -a "${FSL_FULL}/etc/fslconf/." "${FSL_MINI}/etc/fslconf/"

	# optional data (safe to skip if you truly don't need atlases/templates)
	cp -a "${FSL_FULL}/share/fsl/data/." "${FSL_MINI}/share/fsl/data/" || true

	# copy requested tools and their ELF deps
	for t in ${FSL_TOOLS}; do
		if [ -x "${FSL_FULL}/bin/${t}" ]; then
			cp -a "${FSL_FULL}/bin/${t}" "${FSL_MINI}/bin/"
			# copy resolved shared libs (absolute paths only)
			for so in $(ldd "${FSL_FULL}/bin/${t}" | awk '/=> \//{print $3}'); do
				cp -n "${so}" "${FSL_MINI}/lib/" 2>/dev/null || true
			done
		elif [ -f "${FSL_FULL}/bin/${t}" ]; then
			# shell/python wrappers
			cp -a "${FSL_FULL}/bin/${t}" "${FSL_MINI}/bin/"
		fi
	done

	# include FSL private libs (*.so*) that some tools dlopen at runtime
	cp -a "${FSL_FULL}/lib/"lib*.so* "${FSL_MINI}/lib/" 2>/dev/null || true

	# make ${SAMBA_APPS_DIR}/fsl point to our mini tree (replaces any previous link to the full tree)
	ln -sfn "${FSL_MINI}" "${FSLBASE}"




	# ---- end-of-stage sanity against mini FSL ----
	FSLDIR="${FSLBASE}"  # base now points to mini
	if [ ! -x "${FSLDIR}/bin/fslmaths" ]; then
		echo "FATAL: ${FSLDIR}/bin/fslmaths not found in mini FSL." >&2
		ls -l "${FSLDIR}/bin" 2>/dev/null || true
		exit 1
	fi
	# smoke test (prints version or exits 0 silently)
	"${FSLDIR}/bin/fslmaths" -version >/dev/null 2>&1 || {
		echo "FATAL: fslmaths failed to run from mini FSL." >&2
		exit 1
	}

    
    # -------

    # --- MATLAB Runtime R2015b (MCR) + Java 8 ---
	# Consistent locations
	BUILD_ROOT=/opt/build
	ME_DIR=${BUILD_ROOT}/matlab_execs
	CACHE_DIR=${BUILD_ROOT}/matlab_cache
	MATLAB_2015b_PATH=/opt/MATLAB/MATLAB2015b_runtime/v90
	INSTALLER_NAME=MCR_R2015b_glnxa64_installer.zip
	INSTALLER_PATH=${ME_DIR}/${INSTALLER_NAME}
	TEMP_DIR=${ME_DIR}/temp
	
	# Prepare directories (do NOT mkdir the installer *file* path)
	mkdir -p "$MATLAB_2015b_PATH" "$ME_DIR" "$TEMP_DIR" "$CACHE_DIR"
	
	# If a stale directory exists where the file should go, remove it
	if [ -d "$INSTALLER_PATH" ]; then
	  rm -rf "$INSTALLER_PATH"
	fi
	
	# Prefer cached copy; else download to a *file* with -O
	if [ -f "${CACHE_DIR}/${INSTALLER_NAME}" ]; then
	  cp -f "${CACHE_DIR}/${INSTALLER_NAME}" "${INSTALLER_PATH}"
	else
	  wget -O "${INSTALLER_PATH}" \
		"http://ssd.mathworks.com/supportfiles/downloads/R2015b/deployment_files/R2015b/installers/glnxa64/${INSTALLER_NAME}"
	  cp -f "${INSTALLER_PATH}" "${CACHE_DIR}/" || true
	fi
	
	# Unpack and install non-interactively
	unzip -d "${TEMP_DIR}" "${INSTALLER_PATH}"
	"${TEMP_DIR}/install" -mode silent -agreeToLicense yes -destinationFolder "${MATLAB_2015b_PATH}"
	rm -rf "${TEMP_DIR}"
	
	# Verify key libs in either runtime/ or bin/ tree (MathWorks moved things across updates)
	if ! ls "${MATLAB_2015b_PATH}"/runtime/glnxa64/libmwmclmcrrt.so* >/dev/null 2>&1 && \
	   ! ls "${MATLAB_2015b_PATH}"/bin/glnxa64/libmwmclmcrrt.so*     >/dev/null 2>&1 ; then
	  echo "FATAL: MCR libmwmclmcrrt.so* missing under ${MATLAB_2015b_PATH}" >&2
	  exit 1
	fi
	
	# Java 8 for MATLAB2015b compatibility
	apt-get update && apt-get install -y --no-install-recommends openjdk-8-jre-headless
	mkdir -p /opt/samba/java
	cp -a /usr/lib/jvm/java-8-openjdk-amd64/jre /opt/samba/java
	
	# Make MCR discoverable by the dynamic linker (do this LATE so native builds don’t pick up MCR’s libstdc++)
	cat >/etc/ld.so.conf.d/mcr_v90.conf <<EOF
	/opt/MATLAB/MATLAB2015b_runtime/v90/runtime/glnxa64
	/opt/MATLAB/MATLAB2015b_runtime/v90/bin/glnxa64
	/opt/MATLAB/MATLAB2015b_runtime/v90/sys/os/glnxa64
	EOF
	ldconfig
	
	# Read/execute perms for non-root users
	chmod -R a+rX /opt/MATLAB "$ME_DIR"

	# --- Perlbrew + Perl 5.16.3 + cpanm + Carton (no project install here) ---
	curl -L https://install.perlbrew.pl | bash
	"${PERLBREW_ROOT}/bin/perlbrew" init
	"${PERLBREW_ROOT}/bin/perlbrew" install -n perl-5.16.3
	"${PERLBREW_ROOT}/bin/perlbrew" install-cpanm
	"${PERLBREW_ROOT}/bin/perlbrew" exec --with perl-5.16.3 cpanm -n Carton


%test
	set -eu
	SAMBA_APPS_DIR="${SAMBA_APPS_DIR:-/opt/samba}"
	FSLBASE="${SAMBA_APPS_DIR}/fsl"

	if [ -n "${FSLVER:-}" ] && [ -d "${FSLBASE}/${FSLVER}" ]; then
		FSLDIR="${FSLBASE}/${FSLVER}"
	else
		FSLDIR="$(find "${FSLBASE}" -maxdepth 1 -mindepth 1 -type d -name '6.*' 2>/dev/null | sort -V | tail -1 || true)"
	fi
	: "${FSLDIR:?FATAL: No FSL dir found under ${FSLBASE} in %test}"

	echo "[%test:fsl_mcr] SAMBA_APPS_DIR=${SAMBA_APPS_DIR}"
	echo "[%test:fsl_mcr] FSLDIR=${FSLDIR}"
	ls -l "${FSLDIR}/bin" || { echo "[%test:fsl_mcr] bin missing"; exit 1; }
	[ -x "${FSLDIR}/bin/fslmaths" ] || { echo "[%test:fsl_mcr] fslmaths not executable"; exit 1; }
	"${FSLDIR}/bin/fslmaths" -version
	echo "[%test:fsl_mcr] OK"

%runscript
    exec /bin/sh -c "$@"
