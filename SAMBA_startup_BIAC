#!/bin/bash
# Custom SAMBA startup with frozen pipeline code including pipeline_utilities(:D ) shush now
if [[ -d $SAMBA_PATH ]];then
    SPath=${SAMBA_PATH};
else
    SPath="${HOME}/SAMBA";
fi
echo "frozen dance at ${SPath}";
## For BIAC:
PU_path="${SPath}/../pipeline_utilities";
if [[ ! -d "${PU_path}" ]];then
    PU_path="${HOME}/pipeline_utilities";
fi
export RADISH_PERL_LIB=${PU_path};

#export RADISH_PERL_LIB="${HOME}/SAMBA/local/lib/perl5:${RADISH_PERL_LIB}";
perlbrew switch perl-5.16.3;
#perl -V | tail -20;
local_perl="${SPath}/local/lib/perl5";
if [[ -d "${local_perl}" ]];then
    export RADISH_PERL_LIB="${local_perl}:${RADISH_PERL_LIB}";
fi

echo "adjust lib path from $RADISH_PERL_LIB";
declare -x RADISH_PERL_LIB=$(echo $RADISH_PERL_LIB|sed -E "s:${WORKSTATION_HOME}/+shared/+pipeline_utilities:${SPath}/.pipeline_utilities:g");
echo "to $RADISH_PERL_LIB";
PERL5LIB="${RADISH_PERL_LIB}:${PERL5LIB}"; export PERL5LIB;
echo ${SPath}/vbm_pipeline_start.pl $@
#sleep 2
echo " "
echo " "
sge_test=$(which qsub | grep sge | wc -l);
#if [[ ! 1 ]];then # For testing
if [[ $sge_test == 1 ]]; then
    sb_dir=${HOME}/SAMBA_sbatch;
    if [[ ! -d ${sb_dir} ]];then
	mkdir -m 775 ${sb_dir};
    fi
   
    date_tag=$(date --rfc-3339=seconds | tr ' ' '_' | tr ':' '.' | tr -d '-');
    name="SAMBA_pipeline_${date_tag}";
    sbatch_file="${HOME}/SAMBA_sbatch/${name}.bash";
    source_sbatch="${SPath}/SAMBA_SGE_job.bash";
    cp ${source_sbatch} ${sbatch_file};
    echo "#\$ -N ${name}" >> ${sbatch_file};
    echo "#\$ -M ${USER}@duke.edu" >> ${sbatch_file};
    echo "#\$ -m ea" >> ${sbatch_file}; 
    echo "#\$ -o ${sb_dir}/slurm-"'$JOB_ID.out' >> ${sbatch_file};
    echo "#\$ -e ${sb_dir}/slurm-"'$JOB_ID.out' >> ${sbatch_file};

    echo "${SPath}/vbm_pipeline_start.pl $@" >> ${sbatch_file};
    
    #9 January 2020 (Thurs): '-b y' was not the right thing to do here, and is why $JOB_ID, etc no workey
    #cmd="qsub -terse  -b y -V ${sbatch_file}"; 
    #cmd="qsub -terse -V ${sbatch_file}";
    cmd="qsub -q long.q -terse -V ${sbatch_file}"; # 27 February 2020 BJA: For BIAC cluster, want to run on long queue to avoid premature job deletion.

#cmd="qsub -terse  -N SAMBA_pipeline -M ${USER}@duke.edu -m ea -o ${HOME}/SAMBA_sbatch/slurm-"'$JOB_ID'".out -e ${HOME}/SAMBA_sbatch/slurm-"'$JOB_ID'".out -b y -V ${SPath}/vbm_pipeline_start.pl $@";

echo $cmd;

echo " ";
echo " ";

   job_id=$($cmd | tail -1);
#qsub  ${SPath}/vbm_pipeline_start.pl $@;
   echo "JOB ID = ${job_id}";
   echo "";
   pb_test=$(which pbcopy 2>&1 | grep 'no pbcopy in' | wc -l);
   if ( [[ "x${pb_test}x" == 'x0x' ]] );then
	   echo "To stop this instance of SAMBA pipeline please use the following command, and will be automatically copied to your clipboard :";
	   pbcopy < "qdel ${job_id}";
       else 
	   echo "To stop this instance of SAMBA pipeline please use the following command:";
       fi
   echo "qdel ${job_id}";
   sleep 3;

   sb_file="${sb_dir}/slurm-${job_id}.out"; # This is the behavior that I really want, but currently not getting! 
   #sb_file="${HOME}/${name}.bash.o${job_id}"; # UPDATE! 9 January 2020 (Thurs): removing '-b y' from qsub command fixes the issue with the line above.

   touch ${sb_file}; #Make sure it exists so we can immediately call the tail command without risk of erroring out.
   tail -f "${sb_file}";
else
    ${SPath}/vbm_pipeline_start.pl $@;
fi
